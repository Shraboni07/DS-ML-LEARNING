import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from imblearn.over_sampling import RandomOverSampler, SMOTE
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler,PowerTransformer, Normalizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.model_selection import StratifiedKFold
from sklearn.utils import shuffle
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
import time
from sklearn.compose import ColumnTransformer
import warnings
from sklearn.feature_selection import RFE
from sklearn.feature_selection import RFECV
from sklearn.feature_selection import SelectFromModel
from sklearn.feature_selection import SelectKBest, chi2
from itertools import combinations, permutations
import itertools
from sklearn.feature_selection import f_classif
import shap
import matplotlib.pyplot as plt

warnings.filterwarnings("ignore", category=FutureWarning)

# Load the dataset
df = pd.read_csv('/kaggle/input/s-obesity/ObesityDataSet_raw_and_data_sinthetic.csv')
df.head()
# Check for missing values
missing_values = df.isnull().sum()
print("Missing Values:\n", missing_values)
# Handle missing values using SimpleImputer
imputer = SimpleImputer(strategy='most_frequent')
df_imputed = imputer.fit_transform(df)
df_imputed = pd.DataFrame(df_imputed, columns=df.columns)
# Print the column names
print(df.columns)

# Splitting the data into features (X) and target variable (y)
X = df.drop('NObeyesdad', axis=1)
y = df['NObeyesdad']
# Data splitting: Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Perform one-hot encoding
encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')
X_train_encoded = pd.DataFrame(encoder.fit_transform(X_train), columns=encoder.get_feature_names_out(X_train.columns))
X_test_encoded = pd.DataFrame(encoder.transform(X_test), columns=encoder.get_feature_names_out(X_train.columns))
# Perform oversampling using RandomOverSampler
oversampler = RandomOverSampler()
X_resampled, y_resampled = oversampler.fit_resample(X_train_encoded, y_train)
#standard scaling
scaler = StandardScaler()
X_resampled_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test_encoded)
#minmax scaler
scaler = MinMaxScaler()
X_resampled_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test_encoded)
#robust scaler
scaler = RobustScaler()
X_resampled_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test_encoded)
#normalizer scaler
scaler = Normalizer()
X_resampled_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test_encoded)

#Power transformer
scaler = PowerTransformer(method='yeo-johnson')
X_resampled_scaled = scaler.fit_transform(X_resampled)
X_test_scaled = scaler.transform(X_test_encoded)
classifiers = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': svm.SVC(),
    'Extra Tree Classifier': ExtraTreesClassifier()
}
